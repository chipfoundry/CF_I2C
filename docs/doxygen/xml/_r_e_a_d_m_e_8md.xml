<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>API<sp/>Reference</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Header<sp/>files</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[EF_Driver_Common.h](#file-ef_driver_commonh)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[EF_I2C.h](#file-ef_i2ch)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[EF_I2C_regs.h](#file-ef_i2c_regsh)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_Driver_Common.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_C<sp/>header<sp/>file<sp/>for<sp/>common<sp/>driver<sp/>definitions<sp/>and<sp/>types._</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>uint32\_t<sp/>|<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/><sp/>&lt;br&gt;_A<sp/>type<sp/>that<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>driver<sp/>functions._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR**](#define-ef_driver_error)<sp/><sp/>((uint32\_t)1)&lt;br&gt;_Unspecified<sp/>error._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_BUSY**](#define-ef_driver_error_busy)<sp/><sp/>((uint32\_t)2)&lt;br&gt;_Driver<sp/>is<sp/>busy._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_I2C\_INVALID\_DATA**](#define-ef_driver_error_i2c_invalid_data)<sp/><sp/>((uint32\_t)7)&lt;br&gt;_Invalid<sp/>I2C<sp/>data._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_PARAMETER**](#define-ef_driver_error_parameter)<sp/><sp/>((uint32\_t)5)&lt;br&gt;_Parameter<sp/>error._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_SPECIFIC**](#define-ef_driver_error_specific)<sp/><sp/>((uint32\_t)6)&lt;br&gt;_Start<sp/>of<sp/>driver<sp/>specific<sp/>errors._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_TIMEOUT**](#define-ef_driver_error_timeout)<sp/><sp/>((uint32\_t)3)&lt;br&gt;_Timeout<sp/>occurred._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_UNSUPPORTED**](#define-ef_driver_error_unsupported)<sp/><sp/>((uint32\_t)4)&lt;br&gt;_Operation<sp/>not<sp/>supported._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_OK**](#define-ef_driver_ok)<sp/><sp/>((uint32\_t)0)&lt;br&gt;_Operation<sp/>succeeded._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_DRIVER_STATUS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_A<sp/>type<sp/>that<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>driver<sp/>functions._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>uint32_t<sp/>EF_DRIVER_STATUS;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Unspecified<sp/>error._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR<sp/>((uint32_t)1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_BUSY`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Driver<sp/>is<sp/>busy._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_BUSY<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_I2C_INVALID_DATA`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Invalid<sp/>I2C<sp/>data._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_I2C_INVALID_DATA<sp/>((uint32_t)7)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_PARAMETER`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Parameter<sp/>error._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_PARAMETER<sp/>((uint32_t)5)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_SPECIFIC`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Start<sp/>of<sp/>driver<sp/>specific<sp/>errors._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_SPECIFIC<sp/>((uint32_t)6)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_TIMEOUT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Timeout<sp/>occurred._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_TIMEOUT<sp/>((uint32_t)3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_UNSUPPORTED`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Operation<sp/>not<sp/>supported._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_UNSUPPORTED<sp/>((uint32_t)4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_OK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Operation<sp/>succeeded._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_OK<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_I2C.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_C<sp/>header<sp/>file<sp/>for<sp/>I2C<sp/>APIs<sp/>which<sp/>contains<sp/>the<sp/>function<sp/>prototypes._</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_getDataLast**](#function-ef_i2c_getdatalast)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*data\_last)<sp/>&lt;br&gt;_Reads<sp/>the<sp/>data<sp/>last<sp/>flag<sp/>from<sp/>the<sp/>I2C<sp/>data<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_getDataValid**](#function-ef_i2c_getdatavalid)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*data\_valid)<sp/>&lt;br&gt;_Reads<sp/>the<sp/>data<sp/>valid<sp/>flag<sp/>from<sp/>the<sp/>I2C<sp/>data<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_getIM**](#function-ef_i2c_getim)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>\*im\_value)<sp/>&lt;br&gt;_Reads<sp/>the<sp/>Interrupt<sp/>Mask<sp/>(IM)<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_getMIS**](#function-ef_i2c_getmis)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>\*mis\_value)<sp/>&lt;br&gt;_Reads<sp/>the<sp/>Masked<sp/>Interrupt<sp/>Status<sp/>(MIS)<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_getPrescaler**](#function-ef_i2c_getprescaler)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>\*prescaler\_value)<sp/>&lt;br&gt;_Gets<sp/>the<sp/>I2C<sp/>prescaler<sp/>value._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_getRIS**](#function-ef_i2c_getris)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>\*ris\_value)<sp/>&lt;br&gt;_Reads<sp/>the<sp/>Raw<sp/>Interrupt<sp/>Status<sp/>(RIS)<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_isBusy**](#function-ef_i2c_isbusy)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*is\_busy)<sp/>&lt;br&gt;_Checks<sp/>if<sp/>the<sp/>I2C<sp/>peripheral<sp/>is<sp/>busy._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_isCommandFIFOAvailable**](#function-ef_i2c_iscommandfifoavailable)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*is\_available)<sp/>&lt;br&gt;_Checks<sp/>if<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>available._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_isReadFIFOAvailable**](#function-ef_i2c_isreadfifoavailable)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*is\_available)<sp/>&lt;br&gt;_Checks<sp/>if<sp/>the<sp/>read<sp/>FIFO<sp/>is<sp/>available._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_isWriteFIFOAvailable**](#function-ef_i2c_iswritefifoavailable)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*is\_available)<sp/>&lt;br&gt;_Checks<sp/>if<sp/>the<sp/>write<sp/>FIFO<sp/>is<sp/>available._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_readDataFromReadFIFO**](#function-ef_i2c_readdatafromreadfifo)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>\*data)<sp/>&lt;br&gt;_Reads<sp/>data<sp/>from<sp/>the<sp/>I2C<sp/>Read<sp/>FIFO<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_readDataFromReadFIFONonBlocking**](#function-ef_i2c_readdatafromreadfifononblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>\*data,<sp/>bool<sp/>\*data\_read)<sp/>&lt;br&gt;_Reads<sp/>data<sp/>from<sp/>the<sp/>I2C<sp/>Read<sp/>FIFO<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_receiveByte**](#function-ef_i2c_receivebyte)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>\*data,<sp/>char<sp/>addr)<sp/>&lt;br&gt;_Receives<sp/>a<sp/>single<sp/>byte<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_receiveByteNonBlocking**](#function-ef_i2c_receivebytenonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>\*data,<sp/>char<sp/>addr,<sp/>bool<sp/>\*received)<sp/>&lt;br&gt;_Receives<sp/>a<sp/>single<sp/>byte<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_recieveCharArr**](#function-ef_i2c_recievechararr)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>\*data,<sp/>uint32\_t<sp/>data\_length,<sp/>char<sp/>addr)<sp/>&lt;br&gt;_Receives<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendReadCommand**](#function-ef_i2c_sendreadcommand)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>addr)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>read<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendReadCommandNonBlocking**](#function-ef_i2c_sendreadcommandnonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>addr,<sp/>bool<sp/>\*command\_sent)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>read<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendStartCommand**](#function-ef_i2c_sendstartcommand)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>start<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendStartCommandNonBlocking**](#function-ef_i2c_sendstartcommandnonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*command\_sent)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>start<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendStopCommand**](#function-ef_i2c_sendstopcommand)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>stop<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendStopCommandNonBlocking**](#function-ef_i2c_sendstopcommandnonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*command\_sent)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>stop<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendWriteCommand**](#function-ef_i2c_sendwritecommand)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>addr)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>write<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendWriteCommandNonBlocking**](#function-ef_i2c_sendwritecommandnonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>addr,<sp/>bool<sp/>\*command\_sent)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>write<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendWriteMultipleCommand**](#function-ef_i2c_sendwritemultiplecommand)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>&quot;write<sp/>multiple&quot;<sp/>command<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_sendWriteMultipleCommandNonBlocking**](#function-ef_i2c_sendwritemultiplecommandnonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>bool<sp/>\*command\_sent)<sp/>&lt;br&gt;_Sends<sp/>a<sp/>&quot;write<sp/>multiple&quot;<sp/>command<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_setCommandReg**](#function-ef_i2c_setcommandreg)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>command<sp/>register<sp/>of<sp/>the<sp/>I2C<sp/>controller._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_setCommandRegNonBlocking**](#function-ef_i2c_setcommandregnonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>value,<sp/>bool<sp/>\*command\_sent)<sp/>&lt;br&gt;_Writes<sp/>a<sp/>command<sp/>value<sp/>to<sp/>the<sp/>I2C<sp/>command<sp/>register<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_setDataLast**](#function-ef_i2c_setdatalast)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>data<sp/>last<sp/>flag<sp/>in<sp/>the<sp/>I2C<sp/>data<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_setGclkEnable**](#function-ef_i2c_setgclkenable)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>GCLK<sp/>enable<sp/>bit<sp/>in<sp/>the<sp/>I2C<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_setIM**](#function-ef_i2c_setim)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>mask)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>Interrupt<sp/>Mask<sp/>(IM)<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_setPrescaler**](#function-ef_i2c_setprescaler)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>I2C<sp/>prescaler<sp/>value._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_transmitByte**](#function-ef_i2c_transmitbyte)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>data,<sp/>char<sp/>addr)<sp/>&lt;br&gt;_Transmits<sp/>a<sp/>single<sp/>byte<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_transmitByteNonBlocking**](#function-ef_i2c_transmitbytenonblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>data,<sp/>char<sp/>addr,<sp/>bool<sp/>\*transmitted)<sp/>&lt;br&gt;_Transmits<sp/>a<sp/>single<sp/>byte<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_transmitCharArr**](#function-ef_i2c_transmitchararr)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>\*data,<sp/>uint32\_t<sp/>data\_length,<sp/>char<sp/>addr)<sp/>&lt;br&gt;_Transmits<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_writeDataToWriteFIFO**](#function-ef_i2c_writedatatowritefifo)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>data)<sp/>&lt;br&gt;_Writes<sp/>data<sp/>to<sp/>the<sp/>I2C<sp/>Write<sp/>FIFO<sp/>(blocking)._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_I2C\_writeDataToWriteFIFONonBlocking**](#function-ef_i2c_writedatatowritefifononblocking)<sp/>([**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>i2c,<sp/>char<sp/>data,<sp/>bool<sp/>\*data\_written)<sp/>&lt;br&gt;_Writes<sp/>data<sp/>to<sp/>the<sp/>I2C<sp/>Write<sp/>FIFO<sp/>(non-blocking)._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_getDataLast`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Reads<sp/>the<sp/>data<sp/>last<sp/>flag<sp/>from<sp/>the<sp/>I2C<sp/>data<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_getDataLast<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*data_last</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>retrieves<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>data<sp/>last<sp/>flag<sp/>in<sp/>the<sp/>I2C<sp/>data<sp/>register.<sp/>The<sp/>flag<sp/>indicates<sp/>whether<sp/>the<sp/>current<sp/>data<sp/>is<sp/>the<sp/>last<sp/>in<sp/>an<sp/>I2C<sp/>transaction.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_last`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>boolean<sp/>variable<sp/>where<sp/>the<sp/>state<sp/>of<sp/>the<sp/>data<sp/>last<sp/>flag<sp/>will<sp/>be<sp/>stored.<sp/>The<sp/>value<sp/>is<sp/>set<sp/>to<sp/>`true`<sp/>if<sp/>the<sp/>data<sp/>is<sp/>the<sp/>last<sp/>in<sp/>the<sp/>transaction,<sp/>or`false`<sp/>otherwise.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_getDataValid`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Reads<sp/>the<sp/>data<sp/>valid<sp/>flag<sp/>from<sp/>the<sp/>I2C<sp/>data<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_getDataValid<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*data_valid</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>retrieves<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>data<sp/>valid<sp/>flag<sp/>in<sp/>the<sp/>I2C<sp/>data<sp/>register.<sp/>The<sp/>flag<sp/>indicates<sp/>whether<sp/>the<sp/>data<sp/>is<sp/>valid<sp/>for<sp/>an<sp/>I2C<sp/>transaction.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_valid`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>boolean<sp/>variable<sp/>where<sp/>the<sp/>state<sp/>of<sp/>the<sp/>data<sp/>valid<sp/>flag<sp/>will<sp/>be<sp/>stored.<sp/>The<sp/>value<sp/>is<sp/>set<sp/>to<sp/>`true`<sp/>if<sp/>the<sp/>data<sp/>is<sp/>valid,<sp/>or`false`<sp/>otherwise.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_getIM`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Reads<sp/>the<sp/>Interrupt<sp/>Mask<sp/>(IM)<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_getIM<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*im_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>reads<sp/>the<sp/>interrupt<sp/>mask<sp/>register<sp/>(IM)<sp/>of<sp/>the<sp/>I2C<sp/>peripheral.<sp/>The<sp/>IM<sp/>register<sp/>contains<sp/>a<sp/>mask<sp/>value<sp/>that<sp/>determines<sp/>which<sp/>interrupt<sp/>sources<sp/>are<sp/>enabled.<sp/>It<sp/>shows<sp/>the<sp/>status<sp/>of<sp/>interrupt<sp/>enablement<sp/>for<sp/>various<sp/>interrupt<sp/>sources.<sp/>IM<sp/>Register<sp/>Breakdown\*\*:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>0:<sp/>MISS\_ACK<sp/>-<sp/>Slave<sp/>ACK<sp/>is<sp/>missed</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>1:<sp/>CMDE<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>2:<sp/>CMDF<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>3:<sp/>CMDOVF<sp/>-<sp/>Command<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>4:<sp/>WRE<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>5:<sp/>WRF<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>6:<sp/>WROVF<sp/>-<sp/>Write<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>7:<sp/>RDE<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>8:<sp/>RDF<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bits<sp/>[9-31]:<sp/>Reserved.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`im_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>32-bit<sp/>variable<sp/>where<sp/>the<sp/>interrupt<sp/>mask<sp/>value<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_getMIS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Reads<sp/>the<sp/>Masked<sp/>Interrupt<sp/>Status<sp/>(MIS)<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_getMIS<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*mis_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>reads<sp/>the<sp/>masked<sp/>interrupt<sp/>status<sp/>register<sp/>(MIS)<sp/>of<sp/>the<sp/>I2C<sp/>peripheral.<sp/>MIS<sp/>Register<sp/>Breakdown\*\*:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>0:<sp/>MISS\_ACK<sp/>-<sp/>Slave<sp/>ACK<sp/>is<sp/>missed</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>1:<sp/>CMDE<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>2:<sp/>CMDF<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>3:<sp/>CMDOVF<sp/>-<sp/>Command<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>4:<sp/>WRE<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>5:<sp/>WRF<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>6:<sp/>WROVF<sp/>-<sp/>Write<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>7:<sp/>RDE<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>8:<sp/>RDF<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bits<sp/>[9-31]:<sp/>Reserved.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`mis_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>32-bit<sp/>variable<sp/>where<sp/>the<sp/>masked<sp/>interrupt<sp/>status<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_getPrescaler`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Gets<sp/>the<sp/>I2C<sp/>prescaler<sp/>value._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_getPrescaler<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*prescaler_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>reads<sp/>the<sp/>current<sp/>prescaler<sp/>value<sp/>from<sp/>the<sp/>I2C<sp/>peripheral.<sp/>The<sp/>prescaler<sp/>determines<sp/>the<sp/>clock<sp/>frequency<sp/>for<sp/>the<sp/>I2C<sp/>communication.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`prescaler_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>32-bit<sp/>variable<sp/>where<sp/>the<sp/>current<sp/>prescaler<sp/>value<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_getRIS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Reads<sp/>the<sp/>Raw<sp/>Interrupt<sp/>Status<sp/>(RIS)<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_getRIS<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*ris_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>reads<sp/>the<sp/>raw<sp/>interrupt<sp/>status<sp/>register<sp/>(RIS)<sp/>of<sp/>the<sp/>I2C<sp/>peripheral.<sp/>The<sp/>RIS<sp/>register<sp/>provides<sp/>raw<sp/>interrupt<sp/>status<sp/>flags<sp/>indicating<sp/>various<sp/>conditions<sp/>within<sp/>the<sp/>I2C<sp/>communication.<sp/>These<sp/>flags<sp/>include<sp/>information<sp/>such<sp/>as<sp/>FIFO<sp/>states<sp/>and<sp/>errors.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RIS<sp/>Register<sp/>Breakdown\*\*:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>0:<sp/>MISS\_ACK<sp/>-<sp/>Slave<sp/>ACK<sp/>is<sp/>missed</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>1:<sp/>CMDE<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>2:<sp/>CMDF<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>3:<sp/>CMDOVF<sp/>-<sp/>Command<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>4:<sp/>WRE<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>5:<sp/>WRF<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>6:<sp/>WROVF<sp/>-<sp/>Write<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>7:<sp/>RDE<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>8:<sp/>RDF<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bits<sp/>[9-31]:<sp/>Reserved.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`ris_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>32-bit<sp/>variable<sp/>where<sp/>the<sp/>raw<sp/>interrupt<sp/>status<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_isBusy`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Checks<sp/>if<sp/>the<sp/>I2C<sp/>peripheral<sp/>is<sp/>busy._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_isBusy<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*is_busy</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">!<sp/>Sets<sp/>the<sp/>Interrupt<sp/>Clear<sp/>(ICR)<sp/>register.<sp/>\*!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>checks<sp/>the<sp/>`STATUS`<sp/>register<sp/>of<sp/>the<sp/>I2C<sp/>peripheral<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>bus<sp/>is<sp/>currently<sp/>busy.<sp/>The<sp/>result<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>memory<sp/>location<sp/>pointed<sp/>to<sp/>by`is_busy`.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`is_busy`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>busy<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>I2C<sp/>is<sp/>busy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>I2C<sp/>is<sp/>idle.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_OK:<sp/>The<sp/>operation<sp/>completed<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_PARAMETER:<sp/>`i2c`<sp/>or`is_busy`<sp/>is<sp/>NULL.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_isCommandFIFOAvailable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Checks<sp/>if<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>available._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_isCommandFIFOAvailable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*is_available</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>checks<sp/>the<sp/>`STATUS`<sp/>register<sp/>of<sp/>the<sp/>I2C<sp/>peripheral<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>not<sp/>full<sp/>and<sp/>ready<sp/>to<sp/>accept<sp/>new<sp/>commands.<sp/>The<sp/>result<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>memory<sp/>location<sp/>pointed<sp/>to<sp/>by`is_available`.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`is_available`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>availability<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Command<sp/>FIFO<sp/>is<sp/>available.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Command<sp/>FIFO<sp/>is<sp/>full.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_isReadFIFOAvailable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Checks<sp/>if<sp/>the<sp/>read<sp/>FIFO<sp/>is<sp/>available._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_isReadFIFOAvailable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*is_available</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>checks<sp/>the<sp/>`STATUS`<sp/>register<sp/>of<sp/>the<sp/>I2C<sp/>peripheral<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>read<sp/>FIFO<sp/>is<sp/>not<sp/>empty<sp/>and<sp/>has<sp/>data<sp/>available<sp/>to<sp/>be<sp/>read.<sp/>The<sp/>result<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>memory<sp/>location<sp/>pointed<sp/>to<sp/>by`is_available`.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`is_available`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>availability<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Read<sp/>FIFO<sp/>is<sp/>available.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Read<sp/>FIFO<sp/>is<sp/>empty.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_isWriteFIFOAvailable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Checks<sp/>if<sp/>the<sp/>write<sp/>FIFO<sp/>is<sp/>available._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_isWriteFIFOAvailable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*is_available</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>checks<sp/>the<sp/>`STATUS`<sp/>register<sp/>of<sp/>the<sp/>I2C<sp/>peripheral<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>write<sp/>FIFO<sp/>is<sp/>not<sp/>full<sp/>and<sp/>ready<sp/>to<sp/>accept<sp/>new<sp/>data.<sp/>The<sp/>result<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>memory<sp/>location<sp/>pointed<sp/>to<sp/>by`is_available`.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`is_available`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>availability<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Write<sp/>FIFO<sp/>is<sp/>available.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Write<sp/>FIFO<sp/>is<sp/>full.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_readDataFromReadFIFO`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Reads<sp/>data<sp/>from<sp/>the<sp/>I2C<sp/>Read<sp/>FIFO<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_readDataFromReadFIFO<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*data</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>reads<sp/>a<sp/>single<sp/>byte<sp/>of<sp/>data<sp/>from<sp/>the<sp/>I2C<sp/>Read<sp/>FIFO.<sp/>It<sp/>blocks<sp/>until<sp/>the<sp/>FIFO<sp/>becomes<sp/>available<sp/>and<sp/>validates<sp/>the<sp/>data<sp/>read.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Pointer<sp/>to<sp/>a<sp/>variable<sp/>where<sp/>the<sp/>read<sp/>data<sp/>byte<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_OK:<sp/>The<sp/>operation<sp/>completed<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_PARAMETER:<sp/>`i2c`<sp/>or`data`<sp/>is<sp/>NULL.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_I2C\_INVALID\_DATA:<sp/>The<sp/>data<sp/>read<sp/>is<sp/>invalid.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_readDataFromReadFIFONonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Reads<sp/>data<sp/>from<sp/>the<sp/>I2C<sp/>Read<sp/>FIFO<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_readDataFromReadFIFONonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*data_read</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>read<sp/>a<sp/>single<sp/>byte<sp/>of<sp/>data<sp/>from<sp/>the<sp/>I2C<sp/>Read<sp/>FIFO.<sp/>If<sp/>the<sp/>FIFO<sp/>is<sp/>unavailable,<sp/>the<sp/>function<sp/>returns<sp/>immediately.<sp/>The<sp/>validity<sp/>of<sp/>the<sp/>data<sp/>is<sp/>also<sp/>checked.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Pointer<sp/>to<sp/>a<sp/>variable<sp/>where<sp/>the<sp/>read<sp/>data<sp/>byte<sp/>will<sp/>be<sp/>stored.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_read`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>read<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Data<sp/>was<sp/>read<sp/>successfully<sp/>and<sp/>is<sp/>valid.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Read<sp/>FIFO<sp/>was<sp/>unavailable<sp/>or<sp/>data<sp/>is<sp/>invalid.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_OK:<sp/>The<sp/>operation<sp/>completed<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_PARAMETER:<sp/>`i2c`,`data`,<sp/>or`data_read`<sp/>is<sp/>NULL.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_I2C\_INVALID\_DATA:<sp/>The<sp/>data<sp/>read<sp/>is<sp/>invalid.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_receiveByte`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Receives<sp/>a<sp/>single<sp/>byte<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_receiveByte<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>reads<sp/>a<sp/>single<sp/>byte<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address.<sp/>It<sp/>blocks<sp/>until<sp/>all<sp/>operations<sp/>(read<sp/>command,<sp/>stop<sp/>command,<sp/>and<sp/>data<sp/>retrieval)<sp/>are<sp/>completed.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Pointer<sp/>to<sp/>a<sp/>char<sp/>where<sp/>the<sp/>received<sp/>data<sp/>byte<sp/>will<sp/>be<sp/>stored.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>I2C<sp/>address<sp/>from<sp/>which<sp/>the<sp/>data<sp/>will<sp/>be<sp/>read.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_receiveByteNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Receives<sp/>a<sp/>single<sp/>byte<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_receiveByteNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*received</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>read<sp/>a<sp/>single<sp/>byte<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>in<sp/>a<sp/>non-blocking<sp/>manner.<sp/>If<sp/>any<sp/>step<sp/>of<sp/>the<sp/>process<sp/>(read<sp/>command,<sp/>stop<sp/>command,<sp/>or<sp/>data<sp/>retrieval)<sp/>cannot<sp/>complete<sp/>immediately,<sp/>the<sp/>function<sp/>returns.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Pointer<sp/>to<sp/>a<sp/>char<sp/>where<sp/>the<sp/>received<sp/>data<sp/>byte<sp/>will<sp/>be<sp/>stored.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>I2C<sp/>address<sp/>from<sp/>which<sp/>the<sp/>data<sp/>will<sp/>be<sp/>read.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`received`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>reception<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Data<sp/>was<sp/>received<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Reception<sp/>could<sp/>not<sp/>be<sp/>completed.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_recieveCharArr`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Receives<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_recieveCharArr<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>data_length,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>reads<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>from<sp/>a<sp/>specified<sp/>I2C<sp/>address.<sp/>It<sp/>issues<sp/>the<sp/>read<sp/>command<sp/>for<sp/>each<sp/>byte,<sp/>stores<sp/>the<sp/>data<sp/>in<sp/>the<sp/>provided<sp/>buffer,<sp/>and<sp/>sends<sp/>a<sp/>stop<sp/>command<sp/>after<sp/>successful<sp/>reception.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>where<sp/>the<sp/>received<sp/>characters<sp/>will<sp/>be<sp/>stored.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_length`<sp/>Number<sp/>of<sp/>characters<sp/>to<sp/>receive.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>I2C<sp/>address<sp/>from<sp/>which<sp/>the<sp/>data<sp/>will<sp/>be<sp/>read.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendReadCommand`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>read<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendReadCommand<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>sends<sp/>a<sp/>read<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>at<sp/>the<sp/>specified<sp/>address.<sp/>It<sp/>blocks<sp/>until<sp/>the<sp/>command<sp/>FIFO<sp/>becomes<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>The<sp/>I2C<sp/>address<sp/>of<sp/>the<sp/>target<sp/>device.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendReadCommandNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>read<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendReadCommandNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*command_sent</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>send<sp/>a<sp/>read<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>at<sp/>the<sp/>specified<sp/>address.<sp/>If<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>unavailable,<sp/>the<sp/>function<sp/>returns<sp/>immediately.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>The<sp/>I2C<sp/>address<sp/>of<sp/>the<sp/>target<sp/>device.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`command_sent`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>command<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Command<sp/>was<sp/>sent<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Command<sp/>FIFO<sp/>was<sp/>unavailable.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendStartCommand`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>start<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendStartCommand<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>sends<sp/>a<sp/>start<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus.<sp/>It<sp/>blocks<sp/>until<sp/>the<sp/>command<sp/>FIFO<sp/>becomes<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendStartCommandNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>start<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendStartCommandNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*command_sent</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>send<sp/>a<sp/>start<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus.<sp/>If<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>unavailable,<sp/>the<sp/>function<sp/>returns<sp/>immediately.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`command_sent`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>command<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Start<sp/>condition<sp/>was<sp/>sent<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Command<sp/>FIFO<sp/>was<sp/>unavailable.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendStopCommand`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>stop<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendStopCommand<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>sends<sp/>a<sp/>stop<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus.<sp/>It<sp/>blocks<sp/>until<sp/>the<sp/>command<sp/>FIFO<sp/>becomes<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendStopCommandNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>stop<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendStopCommandNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*command_sent</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>send<sp/>a<sp/>stop<sp/>condition<sp/>on<sp/>the<sp/>I2C<sp/>bus.<sp/>If<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>unavailable,<sp/>the<sp/>function<sp/>returns<sp/>immediately.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`command_sent`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>command<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Stop<sp/>condition<sp/>was<sp/>sent<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Command<sp/>FIFO<sp/>was<sp/>unavailable.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendWriteCommand`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>write<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendWriteCommand<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>sends<sp/>a<sp/>write<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>at<sp/>the<sp/>specified<sp/>address.<sp/>It<sp/>blocks<sp/>until<sp/>the<sp/>command<sp/>FIFO<sp/>becomes<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>The<sp/>I2C<sp/>address<sp/>of<sp/>the<sp/>target<sp/>device.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendWriteCommandNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>write<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendWriteCommandNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*command_sent</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>send<sp/>a<sp/>write<sp/>command<sp/>to<sp/>the<sp/>I2C<sp/>device<sp/>at<sp/>the<sp/>specified<sp/>address.<sp/>If<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>unavailable,<sp/>the<sp/>function<sp/>returns<sp/>immediately.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>The<sp/>I2C<sp/>address<sp/>of<sp/>the<sp/>target<sp/>device.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`command_sent`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>command<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Command<sp/>was<sp/>sent<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Command<sp/>FIFO<sp/>was<sp/>unavailable.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendWriteMultipleCommand`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>&quot;write<sp/>multiple&quot;<sp/>command<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendWriteMultipleCommand<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>sends<sp/>a<sp/>&quot;write<sp/>multiple&quot;<sp/>command<sp/>on<sp/>the<sp/>I2C<sp/>bus.<sp/>It<sp/>blocks<sp/>until<sp/>the<sp/>command<sp/>FIFO<sp/>becomes<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_sendWriteMultipleCommandNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sends<sp/>a<sp/>&quot;write<sp/>multiple&quot;<sp/>command<sp/>on<sp/>the<sp/>I2C<sp/>bus<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_sendWriteMultipleCommandNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*command_sent</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>send<sp/>a<sp/>&quot;write<sp/>multiple&quot;<sp/>command<sp/>on<sp/>the<sp/>I2C<sp/>bus.<sp/>If<sp/>the<sp/>command<sp/>FIFO<sp/>is<sp/>unavailable,<sp/>the<sp/>function<sp/>returns<sp/>immediately.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`command_sent`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>command<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>The<sp/>&quot;write<sp/>multiple&quot;<sp/>command<sp/>was<sp/>sent<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Command<sp/>FIFO<sp/>was<sp/>unavailable.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_setCommandReg`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>command<sp/>register<sp/>of<sp/>the<sp/>I2C<sp/>controller._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_setCommandReg<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>ia<sp/>a<sp/>blocking<sp/>function<sp/>that<sp/>writes<sp/>a<sp/>specified<sp/>value<sp/>directly<sp/>to<sp/>the<sp/>I2C<sp/>command<sp/>register.<sp/>It<sp/>allows<sp/>manual<sp/>configuration<sp/>of<sp/>the<sp/>I2C<sp/>controller<sp/>for<sp/>advanced<sp/>or<sp/>custom<sp/>operations.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>32-bit<sp/>value<sp/>to<sp/>write<sp/>to<sp/>the<sp/>I2C<sp/>command<sp/>register.<sp/>This<sp/>value<sp/>typically<sp/>contains<sp/>specific<sp/>bit<sp/>fields<sp/>to<sp/>configure<sp/>the<sp/>I2C<sp/>operation.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_setCommandRegNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Writes<sp/>a<sp/>command<sp/>value<sp/>to<sp/>the<sp/>I2C<sp/>command<sp/>register<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_setCommandRegNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*command_sent</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>write<sp/>a<sp/>specified<sp/>command<sp/>value<sp/>to<sp/>the<sp/>I2C<sp/>command<sp/>register<sp/>in<sp/>a<sp/>non-blocking<sp/>manner.<sp/>It<sp/>checks<sp/>the<sp/>availability<sp/>of<sp/>the<sp/>command<sp/>FIFO<sp/>before<sp/>writing<sp/>and<sp/>updates<sp/>the<sp/>provided<sp/>flag<sp/>to<sp/>indicate<sp/>success.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>command<sp/>value<sp/>to<sp/>be<sp/>written<sp/>to<sp/>the<sp/>command<sp/>register.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`command_sent`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>flag<sp/>that<sp/>indicates<sp/>whether<sp/>the<sp/>command<sp/>was<sp/>successfully<sp/>sent:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>true:<sp/>Command<sp/>was<sp/>written<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>false:<sp/>Command<sp/>was<sp/>not<sp/>written<sp/>(FIFO<sp/>unavailable<sp/>or<sp/>error).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_setDataLast`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>data<sp/>last<sp/>flag<sp/>in<sp/>the<sp/>I2C<sp/>data<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_setDataLast<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>modifies<sp/>the<sp/>data<sp/>last<sp/>flag<sp/>in<sp/>the<sp/>I2C<sp/>data<sp/>register.<sp/>The<sp/>flag<sp/>indicates<sp/>whether<sp/>the<sp/>current<sp/>data<sp/>is<sp/>the<sp/>last<sp/>in<sp/>an<sp/>I2C<sp/>transaction.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`valid`<sp/>A<sp/>boolean<sp/>value<sp/>specifying<sp/>the<sp/>state<sp/>of<sp/>the<sp/>data<sp/>last<sp/>flag.<sp/>Set<sp/>to<sp/>`true`<sp/>to<sp/>mark<sp/>the<sp/>data<sp/>as<sp/>the<sp/>last<sp/>in<sp/>the<sp/>transaction,<sp/>or`false`<sp/>to<sp/>clear<sp/>the<sp/>flag.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_setGclkEnable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>GCLK<sp/>enable<sp/>bit<sp/>in<sp/>the<sp/>I2C<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_setGclkEnable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>GCLK<sp/>enable<sp/>bit</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_setIM`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>Interrupt<sp/>Mask<sp/>(IM)<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_setIM<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>writes<sp/>a<sp/>mask<sp/>value<sp/>to<sp/>the<sp/>interrupt<sp/>mask<sp/>register<sp/>(IM)<sp/>of<sp/>the<sp/>I2C<sp/>peripheral.<sp/>The<sp/>IM<sp/>register<sp/>enables<sp/>or<sp/>disables<sp/>the<sp/>interrupt<sp/>sources.<sp/>The<sp/>bits<sp/>set<sp/>in<sp/>this<sp/>register<sp/>determine<sp/>which<sp/>interrupt<sp/>sources<sp/>generate<sp/>masked<sp/>interrupts.<sp/>IM<sp/>Register<sp/>Breakdown\*\*:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>0:<sp/>MISS\_ACK<sp/>-<sp/>Slave<sp/>ACK<sp/>is<sp/>missed</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>1:<sp/>CMDE<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>2:<sp/>CMDF<sp/>-<sp/>Command<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>3:<sp/>CMDOVF<sp/>-<sp/>Command<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>4:<sp/>WRE<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>5:<sp/>WRF<sp/>-<sp/>Write<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>6:<sp/>WROVF<sp/>-<sp/>Write<sp/>FIFO<sp/>overflow;<sp/>write<sp/>1<sp/>to<sp/>clear</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>7:<sp/>RDE<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bit<sp/>8:<sp/>RDF<sp/>-<sp/>Read<sp/>FIFO<sp/>is<sp/>Full</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Bits<sp/>[9-31]:<sp/>Reserved.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`mask`<sp/>A<sp/>32-bit<sp/>mask<sp/>value<sp/>to<sp/>be<sp/>written<sp/>to<sp/>the<sp/>IM<sp/>register.<sp/>Each<sp/>bit<sp/>corresponds<sp/>to<sp/>a<sp/>specific<sp/>interrupt<sp/>source,<sp/>with<sp/>1<sp/>enabling<sp/>the<sp/>interrupt<sp/>and<sp/>0<sp/>disabling<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_setPrescaler`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>I2C<sp/>prescaler<sp/>value._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_setPrescaler<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>sets<sp/>the<sp/>prescaler<sp/>value<sp/>for<sp/>the<sp/>I2C<sp/>peripheral.<sp/>The<sp/>prescaler<sp/>is<sp/>used<sp/>to<sp/>configure<sp/>the<sp/>speed<sp/>of<sp/>the<sp/>I2C<sp/>communication<sp/>by<sp/>adjusting<sp/>the<sp/>clock<sp/>frequency.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>An<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>I2C<sp/>registers.[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>I2C<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>prescaler<sp/>value<sp/>to<sp/>set<sp/>for<sp/>the<sp/>I2C<sp/>clock.<sp/>This<sp/>value<sp/>determines<sp/>the<sp/>clock<sp/>frequency<sp/>for<sp/>I2C<sp/>communication.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_transmitByte`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Transmits<sp/>a<sp/>single<sp/>byte<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_transmitByte<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>transmits<sp/>a<sp/>single<sp/>byte<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>using<sp/>the<sp/>Write<sp/>FIFO.<sp/>It<sp/>blocks<sp/>until<sp/>all<sp/>operations<sp/>(data<sp/>write,<sp/>write<sp/>command,<sp/>and<sp/>stop<sp/>command)<sp/>are<sp/>completed.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Data<sp/>byte<sp/>to<sp/>be<sp/>transmitted.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>I2C<sp/>address<sp/>to<sp/>which<sp/>the<sp/>data<sp/>will<sp/>be<sp/>sent.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_transmitByteNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Transmits<sp/>a<sp/>single<sp/>byte<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_transmitByteNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*transmitted</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>transmit<sp/>a<sp/>single<sp/>byte<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>using<sp/>the<sp/>Write<sp/>FIFO<sp/>in<sp/>a<sp/>non-blocking<sp/>manner.<sp/>If<sp/>any<sp/>step<sp/>of<sp/>the<sp/>process<sp/>(data<sp/>write,<sp/>write<sp/>command,<sp/>or<sp/>stop<sp/>command)<sp/>cannot<sp/>complete<sp/>immediately,<sp/>the<sp/>function<sp/>returns.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Data<sp/>byte<sp/>to<sp/>be<sp/>transmitted.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>I2C<sp/>address<sp/>to<sp/>which<sp/>the<sp/>data<sp/>will<sp/>be<sp/>sent.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`transmitted`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>transmission<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>Data<sp/>was<sp/>transmitted<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Transmission<sp/>could<sp/>not<sp/>be<sp/>completed.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_transmitCharArr`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Transmits<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_transmitCharArr<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>data_length,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>addr</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>sends<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>to<sp/>a<sp/>specified<sp/>I2C<sp/>address.<sp/>It<sp/>handles<sp/>writing<sp/>the<sp/>data<sp/>to<sp/>the<sp/>I2C<sp/>FIFO<sp/>and<sp/>ensures<sp/>the<sp/>last<sp/>byte<sp/>is<sp/>appropriately<sp/>marked.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Pointer<sp/>to<sp/>the<sp/>array<sp/>of<sp/>characters<sp/>to<sp/>be<sp/>transmitted.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_length`<sp/>Number<sp/>of<sp/>characters<sp/>in<sp/>the<sp/>array<sp/>to<sp/>transmit.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`addr`<sp/>I2C<sp/>address<sp/>to<sp/>which<sp/>the<sp/>data<sp/>will<sp/>be<sp/>sent.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_writeDataToWriteFIFO`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Writes<sp/>data<sp/>to<sp/>the<sp/>I2C<sp/>Write<sp/>FIFO<sp/>(blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_writeDataToWriteFIFO<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>data</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>writes<sp/>a<sp/>single<sp/>byte<sp/>of<sp/>data<sp/>to<sp/>the<sp/>I2C<sp/>Write<sp/>FIFO.<sp/>It<sp/>blocks<sp/>until<sp/>the<sp/>FIFO<sp/>becomes<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Data<sp/>byte<sp/>to<sp/>be<sp/>written<sp/>to<sp/>the<sp/>FIFO.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_I2C_writeDataToWriteFIFONonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Writes<sp/>data<sp/>to<sp/>the<sp/>I2C<sp/>Write<sp/>FIFO<sp/>(non-blocking)._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_I2C_writeDataToWriteFIFONonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_I2C_TYPE_PTR<sp/>i2c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*data_written</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>attempts<sp/>to<sp/>write<sp/>a<sp/>single<sp/>byte<sp/>of<sp/>data<sp/>to<sp/>the<sp/>I2C<sp/>Write<sp/>FIFO.<sp/>If<sp/>the<sp/>FIFO<sp/>is<sp/>unavailable,<sp/>the<sp/>function<sp/>returns<sp/>immediately.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`i2c`<sp/>Pointer<sp/>to<sp/>the<sp/>I2C<sp/>base<sp/>address<sp/>structure<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>Data<sp/>byte<sp/>to<sp/>be<sp/>written<sp/>to<sp/>the<sp/>FIFO.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_written`<sp/>Pointer<sp/>to<sp/>a<sp/>boolean<sp/>where<sp/>the<sp/>write<sp/>status<sp/>will<sp/>be<sp/>stored:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`true`:<sp/>The<sp/>data<sp/>was<sp/>written<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`false`:<sp/>Write<sp/>FIFO<sp/>was<sp/>unavailable.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_I2C_regs.h</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>struct<sp/>[**\_EF\_I2C\_TYPE\_**](#struct-_ef_i2c_type_)<sp/>|<sp/>[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>[**EF\_I2C\_TYPE**](#typedef-ef_i2c_type)<sp/>\*<sp/>|<sp/>[**EF\_I2C\_TYPE\_PTR**](#typedef-ef_i2c_type_ptr)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>struct<sp/>|<sp/>[**\_EF\_I2C\_TYPE\_**](#struct-_ef_i2c_type_)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_CMDE\_FLAG**](#define-ef_i2c_cmde_flag)<sp/><sp/>((uint32\_t)0x2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_CMDF\_FLAG**](#define-ef_i2c_cmdf_flag)<sp/><sp/>((uint32\_t)0x4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_CMDOVF\_FLAG**](#define-ef_i2c_cmdovf_flag)<sp/><sp/>((uint32\_t)0x8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_ADDRESS\_BIT**](#define-ef_i2c_command_reg_cmd_address_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_ADDRESS\_MASK**](#define-ef_i2c_command_reg_cmd_address_mask)<sp/><sp/>((uint32\_t)0x7f)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_READ\_BIT**](#define-ef_i2c_command_reg_cmd_read_bit)<sp/><sp/>((uint32\_t)9)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_READ\_MASK**](#define-ef_i2c_command_reg_cmd_read_mask)<sp/><sp/>((uint32\_t)0x200)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_START\_BIT**](#define-ef_i2c_command_reg_cmd_start_bit)<sp/><sp/>((uint32\_t)8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_START\_MASK**](#define-ef_i2c_command_reg_cmd_start_mask)<sp/><sp/>((uint32\_t)0x100)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_STOP\_BIT**](#define-ef_i2c_command_reg_cmd_stop_bit)<sp/><sp/>((uint32\_t)12)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_STOP\_MASK**](#define-ef_i2c_command_reg_cmd_stop_mask)<sp/><sp/>((uint32\_t)0x1000)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_WRITE\_BIT**](#define-ef_i2c_command_reg_cmd_write_bit)<sp/><sp/>((uint32\_t)10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_WRITE\_MASK**](#define-ef_i2c_command_reg_cmd_write_mask)<sp/><sp/>((uint32\_t)0x400)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_WRITE\_MULTIPLE\_BIT**](#define-ef_i2c_command_reg_cmd_write_multiple_bit)<sp/><sp/>((uint32\_t)11)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_COMMAND\_REG\_CMD\_WRITE\_MULTIPLE\_MASK**](#define-ef_i2c_command_reg_cmd_write_multiple_mask)<sp/><sp/>((uint32\_t)0x800)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_DATA\_REG\_DATA\_BIT**](#define-ef_i2c_data_reg_data_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_DATA\_REG\_DATA\_LAST\_BIT**](#define-ef_i2c_data_reg_data_last_bit)<sp/><sp/>((uint32\_t)9)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_DATA\_REG\_DATA\_LAST\_MASK**](#define-ef_i2c_data_reg_data_last_mask)<sp/><sp/>((uint32\_t)0x200)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_DATA\_REG\_DATA\_MASK**](#define-ef_i2c_data_reg_data_mask)<sp/><sp/>((uint32\_t)0xff)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_DATA\_REG\_DATA\_VALID\_BIT**](#define-ef_i2c_data_reg_data_valid_bit)<sp/><sp/>((uint32\_t)8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_DATA\_REG\_DATA\_VALID\_MASK**](#define-ef_i2c_data_reg_data_valid_mask)<sp/><sp/>((uint32\_t)0x100)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_MISS\_ACK\_FLAG**](#define-ef_i2c_miss_ack_flag)<sp/><sp/>((uint32\_t)0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_RDE\_FLAG**](#define-ef_i2c_rde_flag)<sp/><sp/>((uint32\_t)0x80)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_RDF\_FLAG**](#define-ef_i2c_rdf_flag)<sp/><sp/>((uint32\_t)0x100)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_BUSY\_BIT**](#define-ef_i2c_status_reg_busy_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_BUSY\_MASK**](#define-ef_i2c_status_reg_busy_mask)<sp/><sp/>((uint32\_t)0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_BUS\_ACT\_BIT**](#define-ef_i2c_status_reg_bus_act_bit)<sp/><sp/>((uint32\_t)2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_BUS\_ACT\_MASK**](#define-ef_i2c_status_reg_bus_act_mask)<sp/><sp/>((uint32\_t)0x4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_BUS\_CONT\_BIT**](#define-ef_i2c_status_reg_bus_cont_bit)<sp/><sp/>((uint32\_t)1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_BUS\_CONT\_MASK**](#define-ef_i2c_status_reg_bus_cont_mask)<sp/><sp/>((uint32\_t)0x2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_CMD\_EMPTY\_BIT**](#define-ef_i2c_status_reg_cmd_empty_bit)<sp/><sp/>((uint32\_t)8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_CMD\_EMPTY\_MASK**](#define-ef_i2c_status_reg_cmd_empty_mask)<sp/><sp/>((uint32\_t)0x100)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_CMD\_FULL\_BIT**](#define-ef_i2c_status_reg_cmd_full_bit)<sp/><sp/>((uint32\_t)9)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_CMD\_FULL\_MASK**](#define-ef_i2c_status_reg_cmd_full_mask)<sp/><sp/>((uint32\_t)0x200)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_CMD\_OVF\_BIT**](#define-ef_i2c_status_reg_cmd_ovf_bit)<sp/><sp/>((uint32\_t)10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_CMD\_OVF\_MASK**](#define-ef_i2c_status_reg_cmd_ovf_mask)<sp/><sp/>((uint32\_t)0x400)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_MISS\_ACK\_BIT**](#define-ef_i2c_status_reg_miss_ack_bit)<sp/><sp/>((uint32\_t)3)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_MISS\_ACK\_MASK**](#define-ef_i2c_status_reg_miss_ack_mask)<sp/><sp/>((uint32\_t)0x8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_RD\_EMPTY\_BIT**](#define-ef_i2c_status_reg_rd_empty_bit)<sp/><sp/>((uint32\_t)14)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_RD\_EMPTY\_MASK**](#define-ef_i2c_status_reg_rd_empty_mask)<sp/><sp/>((uint32\_t)0x4000)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_RD\_FULL\_BIT**](#define-ef_i2c_status_reg_rd_full_bit)<sp/><sp/>((uint32\_t)15)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_RD\_FULL\_MASK**](#define-ef_i2c_status_reg_rd_full_mask)<sp/><sp/>((uint32\_t)0x8000)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_WR\_EMPTY\_BIT**](#define-ef_i2c_status_reg_wr_empty_bit)<sp/><sp/>((uint32\_t)11)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_WR\_EMPTY\_MASK**](#define-ef_i2c_status_reg_wr_empty_mask)<sp/><sp/>((uint32\_t)0x800)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_WR\_FULL\_BIT**](#define-ef_i2c_status_reg_wr_full_bit)<sp/><sp/>((uint32\_t)12)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_WR\_FULL\_MASK**](#define-ef_i2c_status_reg_wr_full_mask)<sp/><sp/>((uint32\_t)0x1000)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_WR\_OVF\_BIT**](#define-ef_i2c_status_reg_wr_ovf_bit)<sp/><sp/>((uint32\_t)13)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_STATUS\_REG\_WR\_OVF\_MASK**](#define-ef_i2c_status_reg_wr_ovf_mask)<sp/><sp/>((uint32\_t)0x2000)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_WRE\_FLAG**](#define-ef_i2c_wre_flag)<sp/><sp/>((uint32\_t)0x10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_WRF\_FLAG**](#define-ef_i2c_wrf_flag)<sp/><sp/>((uint32\_t)0x20)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_I2C\_WROVF\_FLAG**](#define-ef_i2c_wrovf_flag)<sp/><sp/>((uint32\_t)0x40)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**IO\_TYPES**](#define-io_types)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_R**](#define-__r)<sp/><sp/>volatile<sp/>const<sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_RW**](#define-__rw)<sp/><sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_W**](#define-__w)<sp/><sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_I2C_TYPE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>struct<sp/>_EF_I2C_TYPE_<sp/>EF_I2C_TYPE;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_I2C_TYPE_PTR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>EF_I2C_TYPE*<sp/>EF_I2C_TYPE_PTR;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>struct<sp/>`_EF_I2C_TYPE_`</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Variables:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>COMMAND<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_RW**](#define-__rw)<sp/>DATA<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>GCLK<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_RW**](#define-__rw)<sp/>IM<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>MIS<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>PR<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>RIS<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>STATUS<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>reserved_1<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>reserved_2<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_CMDE_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_CMDE_FLAG<sp/>((uint32_t)0x2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_CMDF_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_CMDF_FLAG<sp/>((uint32_t)0x4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_CMDOVF_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_CMDOVF_FLAG<sp/>((uint32_t)0x8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_ADDRESS_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_ADDRESS_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_ADDRESS_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_ADDRESS_MASK<sp/>((uint32_t)0x7f)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_READ_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_READ_BIT<sp/>((uint32_t)9)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_READ_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_READ_MASK<sp/>((uint32_t)0x200)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_START_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_START_BIT<sp/>((uint32_t)8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_START_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_START_MASK<sp/>((uint32_t)0x100)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_STOP_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_STOP_BIT<sp/>((uint32_t)12)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_STOP_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_STOP_MASK<sp/>((uint32_t)0x1000)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_WRITE_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_WRITE_BIT<sp/>((uint32_t)10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_WRITE_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_WRITE_MASK<sp/>((uint32_t)0x400)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_WRITE_MULTIPLE_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_WRITE_MULTIPLE_BIT<sp/>((uint32_t)11)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_COMMAND_REG_CMD_WRITE_MULTIPLE_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_COMMAND_REG_CMD_WRITE_MULTIPLE_MASK<sp/>((uint32_t)0x800)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_DATA_REG_DATA_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_DATA_REG_DATA_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_DATA_REG_DATA_LAST_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_DATA_REG_DATA_LAST_BIT<sp/>((uint32_t)9)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_DATA_REG_DATA_LAST_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_DATA_REG_DATA_LAST_MASK<sp/>((uint32_t)0x200)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_DATA_REG_DATA_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_DATA_REG_DATA_MASK<sp/>((uint32_t)0xff)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_DATA_REG_DATA_VALID_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_DATA_REG_DATA_VALID_BIT<sp/>((uint32_t)8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_DATA_REG_DATA_VALID_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_DATA_REG_DATA_VALID_MASK<sp/>((uint32_t)0x100)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_MISS_ACK_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_MISS_ACK_FLAG<sp/>((uint32_t)0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_RDE_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_RDE_FLAG<sp/>((uint32_t)0x80)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_RDF_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_RDF_FLAG<sp/>((uint32_t)0x100)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_BUSY_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_BUSY_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_BUSY_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_BUSY_MASK<sp/>((uint32_t)0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_BUS_ACT_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_BUS_ACT_BIT<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_BUS_ACT_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_BUS_ACT_MASK<sp/>((uint32_t)0x4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_BUS_CONT_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_BUS_CONT_BIT<sp/>((uint32_t)1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_BUS_CONT_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_BUS_CONT_MASK<sp/>((uint32_t)0x2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_CMD_EMPTY_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_CMD_EMPTY_BIT<sp/>((uint32_t)8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_CMD_EMPTY_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_CMD_EMPTY_MASK<sp/>((uint32_t)0x100)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_CMD_FULL_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_CMD_FULL_BIT<sp/>((uint32_t)9)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_CMD_FULL_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_CMD_FULL_MASK<sp/>((uint32_t)0x200)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_CMD_OVF_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_CMD_OVF_BIT<sp/>((uint32_t)10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_CMD_OVF_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_CMD_OVF_MASK<sp/>((uint32_t)0x400)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_MISS_ACK_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_MISS_ACK_BIT<sp/>((uint32_t)3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_MISS_ACK_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_MISS_ACK_MASK<sp/>((uint32_t)0x8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_RD_EMPTY_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_RD_EMPTY_BIT<sp/>((uint32_t)14)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_RD_EMPTY_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_RD_EMPTY_MASK<sp/>((uint32_t)0x4000)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_RD_FULL_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_RD_FULL_BIT<sp/>((uint32_t)15)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_RD_FULL_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_RD_FULL_MASK<sp/>((uint32_t)0x8000)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_WR_EMPTY_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_WR_EMPTY_BIT<sp/>((uint32_t)11)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_WR_EMPTY_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_WR_EMPTY_MASK<sp/>((uint32_t)0x800)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_WR_FULL_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_WR_FULL_BIT<sp/>((uint32_t)12)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_WR_FULL_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_WR_FULL_MASK<sp/>((uint32_t)0x1000)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_WR_OVF_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_WR_OVF_BIT<sp/>((uint32_t)13)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_STATUS_REG_WR_OVF_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_STATUS_REG_WR_OVF_MASK<sp/>((uint32_t)0x2000)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_WRE_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_WRE_FLAG<sp/>((uint32_t)0x10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_WRF_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_WRF_FLAG<sp/>((uint32_t)0x20)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_I2C_WROVF_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_I2C_WROVF_FLAG<sp/>((uint32_t)0x40)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`IO_TYPES`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>IO_TYPES<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__R`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__R<sp/>volatile<sp/>const<sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__RW`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__RW<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__W`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__W<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="README.md"/>
  </compounddef>
</doxygen>
